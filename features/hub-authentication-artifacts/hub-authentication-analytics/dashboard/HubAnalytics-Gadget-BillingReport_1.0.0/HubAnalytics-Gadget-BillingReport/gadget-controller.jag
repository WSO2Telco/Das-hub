<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {
    include("../HubAnalytics-Gadget-Commons/constants.jag");
    include("../HubAnalytics-Gadget-Commons/controller-util.jag");

    var log = new Log();
    response.contentType = 'application/json';

    var FILE_NAME = FILE_NAMES.BILLING_REPORT;

    var action = request.getParameter("action");
    var filter = request.getParameter("filter");
    var draw = request.getParameter("draw");
    var data = request.getContent();
    var filelist = data["files"];

    var loggedInUser = getLoggedInUser();

    if(data != null) {
        var providerConf = data[PROVIDER_CONF];
    }

    if (action === "getLoggedInUser") {
        var jsonUser = {"LoggedInUser": loggedInUser};
        print(jsonUser);
        return;
    }

    if (action === "setToken") {
        var carbon = require('carbon');
        var service = carbon.server.osgiService('org.wso2telco.analytics.killbill.PaymentHandlingService');
        service.addPaymentMethod(loggedInUser.username,data.token);
        return;
    }

    if (action === "pay") {
        var carbon = require('carbon');
        var service = carbon.server.osgiService('org.wso2telco.analytics.killbill.PaymentHandlingService');
        service.genaratePayment(loggedInUser.username,data.amount);
        return;
    }


    if (action === 'getSchema') {
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
        print(providerAPI.getSchema(providerConf));
        return;

    } else if (action === 'getData') {
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');

        var serviceProvider = "";
        if (loggedInUser.isServiceProvider) {
            serviceProvider = loggedInUser.username;
        }

        providerConf.query = "";
        var all = true;
        if (providerConf[PROVIDER_NAME] == BATCH) {

            if(loggedInUser.isOperatorAdmin) {
                providerConf.query += " AND operatorName:" + loggedInUser.operatorNameInProfile;

            } else {
                if (data.operatorName != "all" && data.operatorName != undefined) {
                    providerConf.query += " AND operatorName: (" + data.operatorName+")";
                }
            }

            if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                providerConf.query += " AND serviceProviderId: (" + "\"" + data.serviceProvider + "\")";
            }

            providerConf.query += " AND direction:" + "\""+ "sb" + "\"";

        } else if (providerConf[PROVIDER_NAME] == TYPE.OPERATOR) {
            if (data.operatorName != "all" && data.operatorName != undefined) {
                providerConf.query += "operatorName:" + "(" + data.operatorName + ")";
                all = false;
            }

        } else if (providerConf[PROVIDER_NAME] == TYPE.SP) {
            if (data.serviceProvider != "0" && data.operatorName != undefined) {
                if(data.operatorName != "all")  {
                    providerConf.query += "serviceProviderId:" + "(" + data.serviceProvider + ")" +" AND operatorName:" + "(" + data.operatorName + ")";
                } else  {
                    providerConf.query += "serviceProviderId:" + "(" + data.serviceProvider + ")";
                }
                all = false;
            } else {
                if (loggedInUser.isOperatorAdmin) {
                    providerConf.query += "operatorName:" + "(" + data.operatorName + ")";
                }
            }
        }

        var andSign = '';
        if ((!(loggedInUser.isAdmin) && all == false) || (providerConf[PROVIDER_NAME] == BATCH)) {
            andSign = ' AND ';
        }

        if (loggedInUser.isServiceProvider && (providerConf[PROVIDER_NAME] == TYPE.OPERATOR || providerConf[PROVIDER_NAME] == TYPE.SP)) {
            providerConf.query += andSign + ' _serviceProvider:"' + serviceProvider + '"';
            providerConf.tableName = STREAM.API_SUMMERY;
            //print(providerAPI.getData(providerConf));
            //return;

        } else if (loggedInUser.isServiceProvider && providerConf[PROVIDER_NAME] == BATCH) {
            providerConf.query += andSign + ' _serviceProvider:"' + serviceProvider + '"';

        } else if (loggedInUser.isPublisher && (providerConf[PROVIDER_NAME] == TYPE.OPERATOR || providerConf[PROVIDER_NAME] == BATCH)) {
            providerConf.query += andSign + ' _serviceProvider:"' + serviceProvider + '"';
        }
        print(providerAPI.getData(providerConf));

        log.info("Table ==> " + providerConf.tableName);
        log.info("query ==> " + providerConf.query);
        return;
    } else if(action === 'initiateReprice'){
        var admin=new Packages.org.wso2.carbon.analytics.spark.admin.AnalyticsProcessorAdminService();
        admin.executeScriptInBackground('Sparkscript-repricing-processedStatistics');
    }

    else if (loggedInUser != null) {
        if (loggedInUser.hasNoRole) {
            print({'message': 'Not Allowed!'});
            return;
        }

        if (action == "generateCSV") {
            var fileAppend = getFileAppend(data);
            var userReportDirectory = "/reports/billing/csv/" + loggedInUser.username.replace("@carbon.super","") + "/" ;
            var directory = "repository/deployment/server/jaggeryapps/portal" + userReportDirectory;
            var reportPrefix = loggedInUser.username.replace("@carbon.super", "") + FILE_NAME + fileAppend;

            var carbon = require('carbon');

            //check wte extension file is exist in path.if yes show rerport generation in progress msg.

            var istmpAvailable = istmpfileavaliable(userReportDirectory, (reportPrefix));
            if (istmpAvailable) {
                print({'message': 'File is being generated'});
            }

            removeAllFiles(userReportDirectory, reportPrefix + data.month);
            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');

            var reportMaxLength = 10;

            var providerConf = data[PROVIDER_CONF];
            var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');

            var jagConf = require('jagConf.json');
            var tableName = jagConf["tableList"]["billing-summery"];
            var reportColumns = stringify(jagConf[jagConf["reportNames"]["billing"]]);

            providerConf.query = "year:" + data.year;
            providerConf.query += " AND month:" + getMonth(data.month);

            if (loggedInUser.isOperatorAdmin) {
                providerConf.query += " AND operatorName:" + loggedInUser.operatorNameInProfile;
            } else {
                if (data.operatorName != "all" && data.operatorName != undefined && !(loggedInUser.isServiceProvider)) {
                    if (!(loggedInUser.isAdmin && data.direction == 'nb')) {
                        providerConf.query += " AND operatorName:(" + data.operatorName + ")";
                    }
                }
            }

            if (loggedInUser.isServiceProvider) {
                serviceProvider = loggedInUser.username;
                providerConf.query += " AND serviceProvider:" + "\"" + serviceProvider + "\"";
                providerConf.query += " AND direction:" + "\"" + "nb" + "\"";
            } else {
                if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                    providerConf.query += " AND serviceProvider:" + "\"" + data.serviceProvider + "\"";
                }
                if (loggedInUser.isAdmin) {
                    providerConf.query += " AND direction:" + "\"" + data.direction + "\"";
                } else {
                    providerConf.query += " AND direction:" + "\"" + "sb" + "\"";
                }

            }
            providerConf.query += " AND status:" + "0";
            log.info("Table ==> " + providerConf.tableName);
            log.info("query ==> " + providerConf.query);

            var reportName = directory + loggedInUser.username.replace("@carbon.super", "") + FILE_NAMES.BILLING_REPORT + fileAppend + data.month + "-" + data.year;
            var reportType = "billingCSV";
            service.generateReport(tableName, providerConf.query, reportName, reportMaxLength, reportType, reportColumns, null, null, null);
            print({'message': 'Report is generating'});

            return;

        } else if (action == "generateErrorCSV") {
            log.info(providerConf.query);
            var fileAppend = getFileAppend(data);

            var userReportDirectory = "/reports/billing/csv/error/" + loggedInUser.username.replace("@carbon.super","") + "/" ;
            var directory = "repository/deployment/server/jaggeryapps/portal" + userReportDirectory;
            var reportPrefix = loggedInUser.username.replace("@carbon.super", "") + FILE_NAME + "error-" + fileAppend + data.month;

            var carbon = require('carbon');
            removeAllFiles(userReportDirectory, reportPrefix);
            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');

            var reportMaxLength = 10;

            var providerConf = data[PROVIDER_CONF];
            var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');

            var jagConf = require('jagConf.json');
            var tableName = jagConf["tableList"]["billing-summery"];
            var reportColumns = stringify(jagConf[jagConf["reportNames"]["billing-error"]]);

            providerConf.query = "status : 1 AND year:" + data.year;
            providerConf.query += " AND month:" + getMonth(data.month);

            if (loggedInUser.isOperatorAdmin) {
                providerConf.query += " AND operatorName:" + loggedInUser.operatorNameInProfile;
            } else {
                if (data.operatorName != "all" && data.operatorName != undefined && !(loggedInUser.isServiceProvider)) {
                    if (!(loggedInUser.isAdmin && data.direction == 'nb')) {
                        providerConf.query += " AND operatorName:" + data.operatorName;
                    }
                }
            }

            if (loggedInUser.isServiceProvider) {
                serviceProvider = loggedInUser.username;
                providerConf.query += " AND serviceProvider:" + "\"" + serviceProvider + "\"";
                providerConf.query += " AND direction:" + "\"" + "nb" + "\"";
            } else {
                if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                    providerConf.query += " AND serviceProvider:" + "\"" + data.serviceProvider + "\"";
                }
                if (loggedInUser.isAdmin) {
                    providerConf.query += " AND direction:" + "\"" + data.direction + "\"";
                } else {
                    providerConf.query += " AND direction:" + "\"" + "sb" + "\"";
                }

            }

            log.info("Table ==> " + providerConf.tableName);
            log.info("query ==> " + providerConf.query);

            var reportName = directory + loggedInUser.username.replace("@carbon.super", "") + FILE_NAMES
                    .BILLING_REPORT + "error-" + fileAppend + data.month + "-" + data.year;
            var reportType = "billingErrorCSV";

            service.generateReport(tableName, providerConf.query, reportName, reportMaxLength, reportType, reportColumns, null, null, null);
            print({'message': 'Report is generating'});

            return;

        } else if (action == "generateBill") {
            var fileAppend = getFileAppend(data);
            var userReportDirectory = "/reports/billing/pdf/" + loggedInUser.username.replace("@carbon.super","") + "/";;
            var directory = "repository/deployment/server/jaggeryapps/portal" + userReportDirectory;
            var reportPrefix = loggedInUser.username.replace("@carbon.super", "") + FILE_NAME + fileAppend + data.month;

            var carbon = require('carbon');
            removeAllFiles(userReportDirectory, reportPrefix);
            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');

            var reportMaxLength = 10;

            var providerConf = data[PROVIDER_CONF];
            var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
            log.info('providerConf[PROVIDER_NAME] ' + providerConf[PROVIDER_NAME]);
			var isPaymentEnable=service.isPaymentEnable();

			if(isPaymentEnable == true){
				log.info("payment enable*********************************************");
				//get killbill ids
            	providerConf.query = "";
           		 providerConf.tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_KILLBILL_SP_ACCOUNT";
            	var userList = new Array();
            	var killbillColumnName = "killBillAID";

            	log.info("data.serviceProvider  >>  " + data.serviceProvider);

            	if (loggedInUser.isServiceProvider) {
                	providerConf.tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_KILLBILL_SP_ACCOUNT";
                	providerConf.query = "accountName: \"" + loggedInUser.username.replace("@carbon.super", "") + "\"";
            	}
            	else if (loggedInUser.isOperatorAdmin) {
                	providerConf.tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_KILLBILL_ACCOUNT_OPERATOR_SP_SUMMARY";
                	killbillColumnName = "killbillAID";
                	providerConf.query = "accountName: \"" + loggedInUser.username.replace("@carbon.super", "") + "\"";
                	if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                   		 providerConf.query = concatQuery(providerConf.query, "accountName: \"" + data.serviceProvider.replace("@carbon.super", "") + "\"");
                	}
            	}
            	else if (loggedInUser.isAdmin) {

                	providerConf.tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_KILLBILL_SP_ACCOUNT";
                	if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                    	providerConf.query = "accountName: \"" + data.serviceProvider.replace("@carbon.super", "") + "\"";
                	}
                	if (data.direction == "sb") {
                    	providerConf.tableName = "ORG_WSO2TELCO_ANALYTICS_HUB_STREAM_KILLBILL_ACCOUNT_OPERATOR_SP_SUMMARY";
                    	killbillColumnName = "killbillAID";

                    	if (data.operatorName != null && data.operatorName != "all" && data.operatorName != undefined && !((data.operatorName.toString().search("all"))>=0)) {
                        	providerConf.query = concatQuery(providerConf.query, "operatorName:" + data.operatorName);
                    	}
                	}
            	}
            	else {
                	log.info("only admin sp and opadmin implemented for Billing Reports");
                	return;
            	}

            	log.info("providerConf.query  >>  " + providerConf.query);

            	userList = getUserIdList(providerAPI.getData(providerConf), killbillColumnName);
            	// end of killbill id section

            	providerConf.tableName = "WSO2TELCO_PRICING_ACCUMULATED_SUMMARY";

            	var direction;
            	providerConf.query = "year:" + data.year;
            	providerConf.query += " AND month:" + getMonth(data.month);

            	if (loggedInUser.isOperatorAdmin) {
                	providerConf.query += " AND operatorName:" + loggedInUser.operatorNameInProfile;
            	} else {
                	if (data.operatorName != null && data.operatorName != "all" && data.operatorName != undefined && !(loggedInUser.isServiceProvider) && !((data.operatorName.toString().search("all"))>=0)) {
                        if (!(loggedInUser.isAdmin && data.direction == 'nb')) {
                            providerConf.query += " AND operatorName:" + data.operatorName;
                        }
                	}
            	}

            	if (loggedInUser.isServiceProvider) {
                	serviceProvider = loggedInUser.username;
                	providerConf.query += " AND serviceProvider:" + "\"" + serviceProvider + "\"";
                	providerConf.query += " AND direction:" + "\"" + "nb" + "\"";
            	} else {
                	if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                    	providerConf.query += " AND serviceProvider:" + "\"" + data.serviceProvider + "\"";
                	}
                	if (loggedInUser.isAdmin) {
                    	providerConf.query += " AND direction:" + "\"" + data.direction + "\"";
                    	direction = data.direction;
                	} else {
                    	providerConf.query += " AND direction:" + "\"" + "sb" + "\"";
                    	direction = "sb";
                	}
            	}

            	log.info("providerConf.query" + providerConf.query);

            	var reportName = directory + loggedInUser.username.replace("@carbon.super", "") + FILE_NAMES.BILLING_REPORT + fileAppend + data.month + "-" + data.year;
            	var reportType = "billingPDF";
            	var billingInfo = getBillingInfo();

            	log.info("providerConf.tableName  >>  " + providerConf.tableName);
            	log.info("providerConf.query  >>  " + providerConf.query);

            	service.generatePDFReport(providerConf.tableName, providerConf.query, reportName, reportMaxLength,
                	reportType, direction, data.year, data.month, loggedInUser.isServiceProvider,
                	stringify(loggedInUser), stringify(billingInfo), userList);
            	print({'message': 'Report is generating'});
            	return;

			}else{
				log.info("payment disabled *********************************************");
				var fileAppend=getFileAppend(data);
            	var userReportDirectory = "/reports/billing/pdf/" + loggedInUser.username.replace("@carbon.super","") + "/";;
             	var directory = "repository/deployment/server/jaggeryapps/portal" + userReportDirectory;
            	var reportPrefix = loggedInUser.username.replace("@carbon.super", "") + FILE_NAME + fileAppend + data.month;
            	var carbon = require('carbon');
            	removeAllFiles(userReportDirectory, reportPrefix);

            	providerConf.tableName = "WSO2TELCO_PRICING_ACCUMULATED_SUMMARY";
            	var reportMaxLength = 10;

            	var providerConf = data[PROVIDER_CONF];
            	var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + '-provider-api.js');
            	log.info('providerConf[PROVIDER_NAME] ' + providerConf[PROVIDER_NAME]);

            	var direction;
            	providerConf.query = "year:"+ data.year;
            	providerConf.query += " AND month:"+ getMonth(data.month);


                if (loggedInUser.isOperatorAdmin) {
                    providerConf.query += " AND operatorName:" + loggedInUser.operatorNameInProfile;
                } else {
                    if (data.operatorName != null && data.operatorName != "all" && data.operatorName != undefined && !(loggedInUser.isServiceProvider) && !((data.operatorName.toString().search("all"))>=0)) {
                        if (!(loggedInUser.isAdmin && data.direction == 'nb')) {
                            providerConf.query += " AND operatorName:" + data.operatorName;
                        }
                    }
                }

            	if (loggedInUser.isServiceProvider) {
                	serviceProvider = loggedInUser.username;
                	providerConf.query += " AND serviceProvider:" + "\"" + serviceProvider + "\"";
                	providerConf.query += " AND direction:" + "\""+ "nb" + "\"";
            	} else {
                	if (data.serviceProvider != "0" && data.serviceProvider != undefined) {
                    	providerConf.query += " AND serviceProvider:" + "\"" + data.serviceProvider + "\"";
                	}
                	if (loggedInUser.isAdmin) {
                    	providerConf.query += " AND direction:" + "\""+ data.direction + "\"";
                    	direction = data.direction;
                	} else {
                    	providerConf.query += " AND direction:" + "\""+ "sb" + "\"";
                    	direction = "sb";
                	}
            	}

            	log.info("providerConf.query............." +  providerConf.query);

            	var reportName = directory + loggedInUser.username.replace("@carbon.super","") + FILE_NAMES.BILLING_REPORT +fileAppend+ data.month + "-"+ data.year;
            	var reportType = "billingPDF";
            	var billingInfo = getBillingInfo();

                service.generatePDFReport(providerConf.tableName, providerConf.query, reportName, reportMaxLength,
                    reportType, direction, data.year, data.month, loggedInUser.isServiceProvider,
                    stringify(loggedInUser), stringify(billingInfo), []);
            	print({'message': 'Report is generating'});
            	return;
				}
        }

        else if (action == "availableCSV") {
            var userReportDirectory = "/reports/billing/csv/" + loggedInUser.username.replace("@carbon.super","") + "/";
            var file = new File(userReportDirectory);
            var files = [];

            for (var i = 0; i < file.listFiles().length; i++) {
                var fileName = file.listFiles()[i].getName();
                files.push({"filename": fileName, "myrowid": fileName});
            }

            var result = '{  "draw": ' + draw + ', "recordsTotal": ' + files.length + ',  "recordsFiltered": ' + files.length + ',  "data":' + stringify(files) + ' }';
            print(result);
            return;

        } else if (action == "availableErrorCSV") {
            var userReportDirectory = "/reports/billing/csv/error/" + loggedInUser.username.replace("@carbon.super","") + "/";;
            var file = new File(userReportDirectory);
            var files = [];

            for (var i = 0; i < file.listFiles().length; i++) {
                var fileName = file.listFiles()[i].getName();
                files.push({"filename": fileName, "myrowid": fileName});
            }

            var result = '{  "draw": ' + draw + ', "recordsTotal": ' + files.length + ',  "recordsFiltered": ' + files.length + ',  "data":' + stringify(files) + ' }';
            print(result);
            return;

        } else if (action == "availablePDF") {
            var userReportDirectory = "/reports/billing/pdf/" + loggedInUser.username.replace("@carbon.super","") + "/";
            var file = new File(userReportDirectory);
            var files = [];

            for (var i = 0; i < file.listFiles().length; i++) {
                var fileName = file.listFiles()[i].getName();
                files.push({"filename": fileName, "myrowid": fileName});
            }

            var result = '{  "draw": ' + draw + ', "recordsTotal": ' + files.length + ',  "recordsFiltered": ' + files.length + ',  "data":' + stringify(files) + ' }';
            print(result);
            return;

        } else if (action == "get" && request.getParameter("index") != null) {
            var carbon = require('carbon');
            var carbonhome = carbon.server.home;
            var file = new File(carbonhome + "/tmp/zipdir/" + loggedInUser.username.replace("@carbon.super","") + "_billing" + "_reports.zip");
            response.contentType = "application/zip";
            response.addHeader("Content-Disposition", "attachment; filename=" + file.getName());
            print(file.getStream());


        } else if (action == "remove" && request.getParameter("index") != null) {
            var type = request.getParameter("type");
            if (type == 'csv') {
                userReportDirectory = "/reports/billing/csv/";
            } else if (type == 'pdf') {
                userReportDirectory = "/reports/billing/pdf/";
            } else if (type == 'csv-error') {
                userReportDirectory = "/reports/billing/csv/error";
            }
            var file = new File(userReportDirectory);
            var result = file.listFiles()[request.getParameter("index")].del();
            print({"fileDeleted": result});
            return;
        } else if (action == "removefile") {
            deleteall = false;
            var type = data["type"];

            if (type == 'csv') {
                directory = "/reports/billing/csv/";
            } else if (type == 'pdf') {
                directory = "/reports/billing/pdf/";
            } else if (type == 'error-csv') {
                directory = "/reports/billing/csv/error/";
            }

            var filePath = directory + loggedInUser.username.replace("@carbon.super","") + "/";
            print({"fileDeleted":removeFiles(filePath, filelist, deleteall)});
            return;
        } else if (action == "downlaodzip") {
            //var type = request.getParameter("type");
            var type = data["type"];
            var baseDirectory = "repository/deployment/server/jaggeryapps/portal"

            if (type == 'csv') {
                directory = baseDirectory + "/reports/billing/csv/";
            } else if (type == 'pdf') {
                directory = baseDirectory + "/reports/billing/pdf/";
            } else if (type == 'error-csv') {
                directory = baseDirectory + "/reports/billing/csv/error/";
            }

            var carbon = require('carbon');
            var carbonhome = carbon.server.home.replace(/file(\:)(\/\/\/)/, "");
            var filePath = directory + loggedInUser.username.replace("@carbon.super","") + "/";
            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');
            var zipStatus = service.generateZipFile(carbonhome, filePath, filelist, loggedInUser.username.replace("@carbon.super",""),"billing");

            print({"zipStatus":zipStatus});
        }
    }

}());

function getUserIdList(providerConfig, propertyName) {
    var killBillAIDList=[];
    for (var i in providerConfig){
        killBillAIDList.push(providerConfig[i][propertyName] );
    }
    return killBillAIDList;
};

function concatQuery(query, newQuery){
    query +=( (query != null) &&   (query.trim().length > 0))?" AND ":"";
    return query + newQuery;
};

function getMonth(month){

    if (month == 'January') {
        return 1;
    } else if (month == 'February') {
        return 2;
    } else if (month == 'March') {
        return 3;
    } else if (month == 'April') {
        return 4;
    } else if (month == 'May') {
        return 5;
    } else if (month == 'June') {
        return 6;
    } else if (month == 'July') {
        return 7;
    } else if (month == 'August') {
        return 8;
    } else if (month == 'September') {
        return 9;
    } else if (month == 'October') {
        return 10;
    } else if (month == 'November') {
        return 11;
    } else if (month == 'December') {
        return 12;
    }
};

function removeFiles(userReportDirectory, filelist, delall) {
    var filedeleted;
    if (delall) {
        var file = new File(userReportDirectory);
        var fileslist = file.listFiles();
        var filecount = fileslist.length;
        for (var x = 0; x < filecount; x++) {
            filedeleted = fileslist[x].del();
            if (filedeleted) {
                log.info("File " + fileslist[x].getName() + " deleted");
            }
        }
    } else {
        var fileArray = filelist;
        for (var x = 0; x < fileArray.length; x++) {
            var file = new File(userReportDirectory + fileArray[x]);
            filedeleted = file.del();

            if (filedeleted) {
                log.info("File " + file.getName() + " deleted.");
            } else {
                log.info("File " + file.getName() + " not deleted.");
            }
        }
    }
    return filedeleted;
}

function removeAllFiles(userReportDirectory, reportPrefix1) {
    var filedir = new File(userReportDirectory);
    var fileList = filedir.listFiles();
    var re = reportPrefix1+'(\\d+)';
    for (var i = 0; i < fileList.length; i++) {
        var file = fileList[i];

        if (new RegExp(re,'g').test(file.getName())) {
            log.info("File " + file.getName() + " deleted.");
            var result = file.del();
        }
    }
}

function istmpfileavaliable (userReportDirectory, reportPrefix) {
    var file = new File(userReportDirectory);
    var istmpAvailable = false;
    for (var i = 0; i < file.listFiles().length; i++) {
        if (!file.listFiles()[i].getName().search(reportPrefix)) {
            if (file.listFiles()[i].getName().split(".").pop() == "wte") {
                istmpAvailable = true;
            }
        }
    }
    return istmpAvailable;
};
%>