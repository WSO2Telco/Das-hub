<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {

    include("../HubAnalytics-Gadget-Commons/constants.jag");
    include("../HubAnalytics-Gadget-Commons/controller-util.jag");

    response.contentType = CONTENT_TYPE.APP_JSON;

    var FILE_NAME = FILE_NAMES.TRANSACTION_REPORT;

    var log = new Log();

    var draw=request.getParameter("draw");
    var action = request.getParameter("action");
    var data = request.getContent();
    var loggedInUser = getLoggedInUser();
    var filelist = data["files"];
    var deleteall = false;

    if (action === "getLoggedInUser") {
        var jsonUser = {"LoggedInUser": loggedInUser};
        print(jsonUser);
        return;
    }

    if (action === 'getSchema') {

        var providerConf = data[PROVIDER_CONF];
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + PROVIDER_API);
        print(providerAPI.getSchema(providerConf));

    } else if (action === 'getData') {
        var providerConf = data[PROVIDER_CONF];
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + PROVIDER_API);

        providerConf.query = getDataQuery(data);
        
        print(providerAPI.getData(providerConf));

    } else if (loggedInUser != null) {
        var userReportDirectory = "/reports/transactions/";
        var directory = "repository/deployment/server/jaggeryapps/portal" + userReportDirectory;
        var reportPrefix = loggedInUser.username.replace("@carbon.super","") + FILE_NAME;

        if (loggedInUser.hasNoRole) {
            print({'message': 'Not Allowed!'});
            return;
        }

        if (action == "generate") {
			var fileAppend=getFileAppend(data);

            var istmpAvailable = istmpfileavaliable(userReportDirectory + loggedInUser.username.replace("@carbon.super","") + '/', (reportPrefix+fileAppend));
            if (istmpAvailable) {
                print({'message': 'File is being generated'});
            }

            removeAllFiles(userReportDirectory + loggedInUser.username.replace("@carbon.super","") + '/', (reportPrefix+fileAppend));

            var carbon = require('carbon');
            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');

            var reportMaxLength = 100000;

            var providerConf = data[PROVIDER_CONF];
            var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + PROVIDER_API);

            var jagConf = require('jagConf.json');
            var tableName = jagConf["tableList"]["all"];

            var reportColumns = stringify( jagConf[jagConf["reportNames"]["all"]] );

            if (data.api != "0" && data.api != undefined) {

                if (jagConf["tableList"][data.apiName.toLowerCase()] != undefined) {
                    tableName = jagConf["tableList"][data.apiName.toLowerCase()];
                    reportColumns = stringify( jagConf[jagConf["reportNames"][data.apiName.toLowerCase()]] );
                }
            }

            var reportType = "transaction";
            var reportName = directory + loggedInUser.username.replace("@carbon.super","") + '/' + reportPrefix +fileAppend+ new Date().getTime();
            var batchQuery = getBatchQuery(data);

            log.info("Batch Query >> " + batchQuery);
            
            service.generateReport(tableName, batchQuery, reportName, reportMaxLength, reportType, reportColumns, null, null, null);

            print({'message': 'Report is generating'});

        } else if (action == "available") {

            var file = new File(userReportDirectory + loggedInUser.username.replace("@carbon.super",""));
            var files = [];
            for (var i = 0; i < file.listFiles().length; i++) {
                var fileName = file.listFiles()[i].getName();
                files.push({"filename":fileName,"myrowid":fileName});
            }

            var result = '{  "draw": '+draw+', "recordsTotal": '+files.length+',  "recordsFiltered": '+ files.length +',  "data":' + stringify(files) +' }';
            print(result);
            return;
        } else if (action == "get" && request.getParameter("index") != null) { //TODO:
            var carbon = require('carbon');
            var carbonhome = carbon.server.home;
            var file = new File(carbonhome + "/tmp/zipdir/" + loggedInUser.username.replace("@carbon.super","") + "_transaction" + "_reports.zip");
            response.contentType = "application/zip";
            response.addHeader("Content-Disposition", "attachment; filename=" + file.getName());
            print(file.getStream());
        } else if (action == "remove" && request.getParameter("index") != null) {
            var file = new File(userReportDirectory);
            var result = file.listFiles()[request.getParameter("index")].del();
            print({"fileDeleted": result});
            return;
        } else if (action == "removefile") {
            deleteall = false;
            print({"fileDeleted":removeFiles(userReportDirectory + loggedInUser.username.replace("@carbon.super",""), filelist, deleteall)});
            return;
        } else if (action == "removeallfiles") {
            deleteall = true;
            print({"fileDeleted":removeFiles(userReportDirectory + loggedInUser.username.replace("@carbon.super",""), filelist, deleteall)});
            //print({"fileDeleted":true});
            return;
        } else if (action == "downlaodzip") {

            var carbon = require('carbon');
            var carbonhome = carbon.server.home.replace(/file(\:)(\/\/\/)/, "");
            var filePath = directory + loggedInUser.username.replace("@carbon.super","");
            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');
            var zipStatus = service.generateZipFile(carbonhome, filePath, filelist, loggedInUser.username.replace("@carbon.super",""),"transaction");

            print({"zipStatus":zipStatus});
        }
    }
}());

function removeFiles(userReportDirectory, filelist, delall) {
    var filedeleted;
    if (delall) {
        var file = new File(userReportDirectory);
        var fileslist = file.listFiles();
        var filecount = fileslist.length;
        for (var x = 0; x < filecount; x++) {
            filedeleted = fileslist[x].del();
            if (filedeleted) {
                log.info("File " + fileslist[x].getName() + " deleted");
            }
        }
    } else {
        var fileArray = filelist;
        for (var x = 0; x < fileArray.length; x++) {
            var file = new File(userReportDirectory + "/" + fileArray[x]);
            filedeleted = file.del();

            if (filedeleted) {
                log.info("File " + file.getName() + " deleted.");
            } else {
                log.info("File " + file.getName() + " not deleted.");
            }
        }
    }
    return filedeleted;
}

function removeAllFiles(userReportDirectory, reportPrefix1) {
    var file = new File(userReportDirectory);

    for (var i = 0; i < file.listFiles().length; i++) {
        if (!file.listFiles()[i].getName().search(reportPrefix1)) {
            log.info("File " + file.listFiles()[i].getName() + " deleted.");
            var result = file.listFiles()[i].del();
        }
    }
}

function istmpfileavaliable (userReportDirectory, reportPrefix) {
    var file = new File(userReportDirectory);
    var istmpAvailable = false;
    for (var i = 0; i < file.listFiles().length; i++) {
        if (!file.listFiles()[i].getName().search(reportPrefix)) {
            if (file.listFiles()[i].getName().split(".").pop() == "wte") {
                istmpAvailable = true;
            }
        }
    }
    return istmpAvailable;
};

%>