<%
/**
 *  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *  WSO2 Inc. licenses this file to you under the Apache License,
 *  Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing,
 *  software distributed under the License is distributed on an
 *  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *  KIND, either express or implied.  See the License for the
 *  specific language governing permissions and limitations
 *  under the License.
 *
 */
(function () {

    include("../HubAnalytics-Gadget-Commons/constants.jag");
    include("../HubAnalytics-Gadget-Commons/controller-util.jag");

    response.contentType = CONTENT_TYPE.APP_JSON;

    var FILE_NAME = FILE_NAMES.TRANSACTION_REPORT;

    var log = new Log();

    var action = request.getParameter("action");
    var data = request.getContent();



    var log = new Log();

    var loggedInUser = getLoggedInUser();

    if (action === "getLoggedInUser") {
        var jsonUser = {"LoggedInUser": loggedInUser};
        print(jsonUser);
        return;
    }

    if (action === 'getSchema') {

        var providerConf = data[PROVIDER_CONF];
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + PROVIDER_API);
        print(providerAPI.getSchema(providerConf));

    } else if (action === 'getData') {
        var providerConf = data[PROVIDER_CONF];
        var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + PROVIDER_API);

        providerConf.query = getDataQuery(data);
        
        print(providerAPI.getData(providerConf));

    } else if (loggedInUser != null) {
        var userReportDirectory = "/reports/transactions/" + loggedInUser.username.replace("@carbon.super","") + "/";
        var directory = "repository/deployment/server/jaggeryapps/portal" + userReportDirectory;

        if (loggedInUser.hasNoRole) {
            print({'message': 'Not Allowed!'});
            return;
        }
        var reportPrefix = loggedInUser.username.replace("@carbon.super","") + FILE_NAME;

        if (action == "generate") {
			var fileAppend=getFileAppend(data);

            removeAllFiles(userReportDirectory, (reportPrefix+fileAppend));

            var carbon = require('carbon');
            var service = carbon.server.osgiService('org.wso2telco.analytics.hub.report.engine.ReportEngineService');

            var reportMaxLength = 100000;

            var providerConf = data[PROVIDER_CONF];
            var providerAPI = require('js/core/' + providerConf[PROVIDER_NAME] + PROVIDER_API);

            var jagConf = require('jagConf.json');
            var tableName = jagConf["tableList"]["all"];

            var reportColumns = stringify( jagConf[jagConf["reportNames"]["all"]] );

            if (data.api != "0" && data.api != undefined) {

                if (jagConf["tableList"][data.apiName.toLowerCase()] != undefined) {
                    tableName = jagConf["tableList"][data.apiName.toLowerCase()];
                    reportColumns = stringify( jagConf[jagConf["reportNames"][data.apiName.toLowerCase()]] );
                }
            }

            var reportType = "transaction";
            var reportName = directory + reportPrefix +fileAppend+ new Date().getTime();

            var batchQuery = getBatchQuery(data);

            log.info("Batch Query >> " + batchQuery);
            
            service.generateReport(tableName, batchQuery, reportName, reportMaxLength, reportType, reportColumns, null, null, null);

            print({'message': 'Report is generating'});

        } else if (action == "available") {

            var file = new File(userReportDirectory);

            var files = [];
            for (var i = 0; i < file.listFiles().length; i++) {
                if (!file.listFiles()[i].getName().search(reportPrefix)) {
                    files[i] = {"name": file.listFiles()[i].getName(), "index": i};
                }
            }
            print(files);

        } else if (action == "get" && request.getParameter("index") != null) {
            var file = new File(userReportDirectory).listFiles()[request.getParameter("index")];
            response.contentType = CONTENT_TYPE.APP_OCTSTREAM;
            response.addHeader("Content-Disposition", "attachment; filename=" + file.getName());
            print(file.getStream());

        } else if (action == "remove" && request.getParameter("index") != null) {
            var file = new File(userReportDirectory);
            var result = file.listFiles()[request.getParameter("index")].del();
            print({"fileDeleted": result});
        }
    }
}());

function removeAllFiles(userReportDirectory, reportPrefix1) {
    var file = new File(userReportDirectory);

    for (var i = 0; i < file.listFiles().length; i++) {
        if (!file.listFiles()[i].getName().search(reportPrefix1)) {
            log.info("File " + file.listFiles()[i].getName() + " deleted.");
            var result = file.listFiles()[i].del();
        }
    }
}

%>