/* Enter a unique ExecutionPlan */
@Plan:name('HubAnalytics-ExecutionPlan-PaymentReports')

/* Enter a unique description for ExecutionPlan */
-- @Plan:description('ExecutionPlan')

/* define streams/tables and write queries here ... */


@Import('org.wso2telco.analytics.hub.stream.processedStatistics:1.0.0')
define stream getProcessedResponse(api string, resourcePath string, method string, responseTime long, serviceTime long, serviceProvider string, apiPublisher string,
applicationName string, requestId string, operatorId string, responseCode string, isSuccess bool, msisdn string, direction string, jsonBody string, serviceProviderId string,
spUserId string, spConsumerKey string, errorMessageId string, errorText string, responseTimeRange string, year int, month int, day int, hour int, operatorName string, apiPublisherID string,
apiID string, department string, applicationId string );

@Export('org.wso2telco.analytics.hub.stream.payment.processedStatistics:1.0.0')
define stream paymentProcessedResponse (api string, resourcePath string, method string, responseTime long, serviceTime long, serviceProvider string, apiPublisher string, applicationName string, operatorId string,
responseCode string, msisdn string, direction string, eventType string, totalAmountChargedOrRefunded double, onBehalfOf string, purchaseCategoryCode string,
merchantID string, productCategory string, productSubCategory string, additionalTagging string, taxAmount double, channel string,
amount double, currency string, description string, serverReferenceCode string, clientCorrelator string, transactionOperationStatus string, referenceCode string, endUserId string,
resourceURL string, year int, month int, day int, hour int, operatorName string, apiPublisherID string, apiID string, department string, applicationId string );


/*JavaScript function validates the given purchase category code is a 12 length number*/	
define function checkPurchaseCategoryCodeValidity[JavaScript] return bool {
			return false;	
			
    var str1 = data[0];
    var str2 = data[1];
   
	var responce = false;
	if( str1 ){
		if(
		
		  
		  (str1.length == str2) &&
		   

		   (!isNaN(str1)) ){
			responce = true;
		}
	}																														
    return responce;
	
};

/**
* Confirms the response is Payment and a success response
*/

@info(name = 'query1')
from getProcessedResponse  [str:lower(api) == 'payment' and isSuccess == true]
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode, msisdn, direction, jsonBody, year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into tempPaymentPreProcessedResponse;

/**
* Creates a temporary stream for payment
*/

@info(name = 'query2')
from tempPaymentPreProcessedResponse [(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction') is null) == false ]
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode, msisdn, direction, jsonBody,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.transactionOperationStatus'),'string') as transactionOperationStatus,
year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into tempPaymentProcessedResponse;


/**
* Confirms the response is a Charged response
*/

@info(name = 'query3')
from tempPaymentProcessedResponse [transactionOperationStatus  == 'Charged' ]
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.endUserId'),'string') as msisdn,
direction, 'Charge' as eventType,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.totalAmountCharged'),'double') as totalAmountChargedOrRefunded,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingMetaData.onBehalfOf'),'string') as onBehalfOf,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingMetaData.purchaseCategoryCode'),'string') as purchaseCategoryCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingMetaData.taxAmount'),'double') as taxAmount,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingMetaData.channel'),'string') as channel,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingInformation.amount'),'double') as amount,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingInformation.currency'),'string') as currency,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingInformation.description'),'string') as description,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.serverReferenceCode'),'string') as serverReferenceCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.clientCorrelator'),'string') as clientCorrelator,
transactionOperationStatus,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.referenceCode'),'string') as referenceCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.endUserId'),'string') as endUserId,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.resourceURL'),'string') as resourceURL,
year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into prePaymentProcessedResponse;

/**
* Confirms the response is a Refund response
*/

@info(name = 'query4')
from tempPaymentProcessedResponse [transactionOperationStatus  == 'Refunded' ]
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.endUserId'),'string') as msisdn,
direction, 'Refund' as eventType,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.totalAmountRefunded'),'double') as totalAmountChargedOrRefunded,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingMetaData.onBehalfOf'),'string') as onBehalfOf,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingMetaData.purchaseCategoryCode'),'string') as purchaseCategoryCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingMetaData.taxAmount'),'double') as taxAmount,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingMetaData.channel'),'string') as channel,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingInformation.amount'),'double') as amount,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingInformation.currency'),'string') as currency,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.paymentAmount.chargingInformation.description'),'string') as description,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.originalServerReferenceCode'),'string') as serverReferenceCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.clientCorrelator'),'string') as clientCorrelator,
transactionOperationStatus,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.referenceCode'),'string') as referenceCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.endUserId'),'string') as endUserId,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountTransaction.resourceURL'),'string') as resourceURL,
year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into prePaymentProcessedResponse;

/**
* Creates a temporary stream for amountReservationTransaction
*/

@info(name = 'query5')
from tempPaymentPreProcessedResponse [(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction') is null) == false ]
select api,
str:replaceAll(resourcePath,  'transactions/',  'transactions') as resourcePath,
method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode, msisdn, direction, jsonBody, year, month, day, hour,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.transactionOperationStatus'),'string') as transactionOperationStatus, operatorName, apiPublisherID, apiID, department, applicationId
insert into tempAmountReservationTransaction;

/**
* Confirms the response is a releasing the reservation
*/

@info(name = 'query6')
from tempAmountReservationTransaction [transactionOperationStatus  == 'Released' ]
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.endUserId'),'string') as msisdn,
direction, 'ReleaseReservation' as eventType,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.totalAmountCharged'),'double') as totalAmountChargedOrRefunded,
'' as onBehalfOf,
'' as purchaseCategoryCode,
convert(0, 'double') as taxAmount,
'' as channel,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.amount'),'double') as amount,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.currency'),'string') as currency,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.description'),'string') as description,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.originalServerReferenceCode'),'string') as serverReferenceCode,
'' as clientCorrelator,
transactionOperationStatus,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.referenceCode'),'string') as referenceCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.endUserId'),'string') as endUserId,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.resourceURL'),'string') as resourceURL,
year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into prePaymentProcessedResponse;

/**
* Confirms the response is a reserve an additional amount
*/

@info(name = 'query7')
from tempAmountReservationTransaction [(transactionOperationStatus  == 'Reserved') and (str:regexp(resourcePath, "(.*)/amountReservation/(.*)"))]
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.endUserId'),'string') as msisdn,
direction, 'ReserveAdditionalAmount' as eventType,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.totalAmountCharged'),'double') as totalAmountChargedOrRefunded,
'' as onBehalfOf,
'' as purchaseCategoryCode,
convert(0, 'double') as taxAmount,
'' as channel,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.amount'),'double') as amount,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.currency'),'string') as currency,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.description'),'string') as description,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.originalServerReferenceCode'),'string') as serverReferenceCode,
'' as clientCorrelator,
transactionOperationStatus,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.referenceCode'),'string') as referenceCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.endUserId'),'string') as endUserId,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.resourceURL'),'string') as resourceURL,
year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into prePaymentProcessedResponse;

/**
* Confirms the response is a reserve an amount
*/

@info(name = 'query8')
from tempAmountReservationTransaction [(transactionOperationStatus  == 'Reserved') and (str:regexp(resourcePath, "(.*)/amountReservation"))]
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.endUserId'),'string') as msisdn,
direction, 'ReserveAmount' as eventType,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.totalAmountCharged'),'double') as totalAmountChargedOrRefunded,
'' as onBehalfOf,
'' as purchaseCategoryCode,
convert(0, 'double') as taxAmount,
'' as channel,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.amount'),'double') as amount,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.currency'),'string') as currency,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.description'),'string') as description,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.originalServerReferenceCode'),'string') as serverReferenceCode,
'' as clientCorrelator,
transactionOperationStatus,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.referenceCode'),'string') as referenceCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.endUserId'),'string') as endUserId,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.resourceURL'),'string') as resourceURL,
year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into prePaymentProcessedResponse;

/**
* Confirms the response is a charge against a reservation
*/

@info(name = 'query9')
from tempAmountReservationTransaction [transactionOperationStatus  == 'Charged' ]
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.endUserId'),'string') as msisdn,
direction,
'ChargeAgainstReservation' as eventType,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.totalAmountCharged'),'double') as totalAmountChargedOrRefunded,
'' as onBehalfOf,
'' as purchaseCategoryCode,
convert(0, 'double') as taxAmount,
'' as channel,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.amount'),'double') as amount,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.currency'),'string') as currency,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.paymentAmount.chargingInformation.description'),'string') as description,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.originalServerReferenceCode'),'string') as serverReferenceCode,
'' as clientCorrelator,
transactionOperationStatus,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.referenceCode'),'string') as referenceCode,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.endUserId'),'string') as endUserId,
cast(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'amountReservationTransaction.resourceURL'),'string') as resourceURL,
year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into prePaymentProcessedResponse;

/**
* Creates a temporary stream for paymentTransactionList
*/

@info(name = 'query10')
from tempPaymentPreProcessedResponse [(wso2TelcoHubAnalytics:getJSONBody(jsonBody,'paymentTransactionList') is null) == false ]
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode,
str:replaceAll(str:substr(resourcePath,  '/(.*)/(.*)',  1) , '/transactions', '')as msisdn,
direction, jsonBody,
'' as eventType, convert(0, 'double') as totalAmountChargedOrRefunded, '' as onBehalfOf, '' as purchaseCategoryCode, convert(0, 'double') as taxAmount,
'' as channel, convert(0, 'double') as amount, '' as currency, '' as description, '' as serverReferenceCode,
'' as clientCorrelator, '' as transactionOperationStatus, '' as referenceCode, '' as endUserId, '' as resourceURL,
year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into tempListChargeOperationsResponse;

/**
* Use the stream processor to extract the fields of the json body and creates the success response
*/

@info(name = 'query11')
from tempListChargeOperationsResponse#wso2TelcoHubAnalytics:getPaymentStream(jsonBody,'listChargeOperations')
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode, msisdn, direction, 'ListChargeOperations' as eventType,
totalAmountChargedOrRefunded, onBehalfOf, purchaseCategoryCode, taxAmount, channel, amount, currency, description, serverReferenceCode,
clientCorrelator, transactionOperationStatus, referenceCode, endUserId, resourceURL, year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into prePaymentProcessedResponse;

/**
* purchaseCategoryCode to be break in to substrings if it is a length 12 number. 1st 3 letters is merchent id and set the same to onBehalfOf
*/

@info(name = 'query12')
from prePaymentProcessedResponse
[checkPurchaseCategoryCodeValidity(str:coalesce(purchaseCategoryCode,''), 12 ) == true]
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode, msisdn, direction, eventType,
convert(convert( totalAmountChargedOrRefunded, 'string'), 'double') as totalAmountChargedOrRefunded, onBehalfOf, purchaseCategoryCode,
str:substr(purchaseCategoryCode, 0,3) as merchantID, str:substr(purchaseCategoryCode, 3,3) as productCategory, str:substr(purchaseCategoryCode, 6,3) as productSubCategory,
str:substr(purchaseCategoryCode, 9,3) as additionalTagging, convert(convert( taxAmount, 'string'), 'double') as taxAmount, channel, convert( convert( amount, 'string'), 'double') as amount, currency, description, serverReferenceCode,
clientCorrelator, transactionOperationStatus, referenceCode, endUserId, resourceURL, year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into paymentProcessedResponse;

/*
* code not matching query 12 criteria will be inserted normal here.
*/

@info(name = 'query13')
from prePaymentProcessedResponse
[checkPurchaseCategoryCodeValidity(str:coalesce(purchaseCategoryCode,''), 12 ) == false]
select api, resourcePath, method, responseTime, serviceTime, serviceProvider, apiPublisher, applicationName, operatorId, responseCode, msisdn, direction, eventType,
convert(convert( totalAmountChargedOrRefunded, 'string'), 'double') as totalAmountChargedOrRefunded, onBehalfOf, purchaseCategoryCode, onBehalfOf as merchantID , '' as productCategory, '' as productSubCategory, '' as additionalTagging,
convert(convert( taxAmount, 'string'), 'double') as taxAmount, channel, convert(convert( amount, 'string'), 'double') as amount, currency, description, serverReferenceCode,
clientCorrelator, transactionOperationStatus, referenceCode, endUserId, resourceURL, year, month, day, hour, operatorName, apiPublisherID, apiID, department, applicationId
insert into paymentProcessedResponse;